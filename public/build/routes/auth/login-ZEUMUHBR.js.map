{
  "version": 3,
  "sources": ["browser-route-module:C:\\Users\\Eduardo\\Desktop\\cursos\\remix-blog\\app\\routes\\auth\\login.jsx?browser", "../../../../app/routes/auth/login.jsx"],
  "sourcesContent": ["export { default } from \"C:\\\\Users\\\\Eduardo\\\\Desktop\\\\cursos\\\\remix-blog\\\\app\\\\routes\\\\auth\\\\login.jsx\";", "import { useActionData, redirect, json } from 'remix'\nimport { db } from '~/utils/db.server'\nimport { createUserSession, login, register } from '~/utils/session.server'\n\nfunction validateUsername(username) {\n  if (typeof username !== 'string' || username.length < 3) {\n    return 'Username must be at least 3 characters'\n  }\n}\n\nfunction validatePassword(password) {\n  if (typeof password !== 'string' || password.length < 6) {\n    return 'Password must be at least 6 characters'\n  }\n}\n\nfunction badRequest(data) {\n  return json(data, { status: 400 })\n}\n\nexport const action = async ({ request }) => {\n  const form = await request.formData()\n  const loginType = form.get('loginType')\n  const username = form.get('username')\n  const password = form.get('password')\n\n  const fields = { loginType, username, password }\n\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password),\n  }\n\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return badRequest({ fieldErrors, fields })\n  }\n\n  switch (loginType) {\n    case 'login': {\n      // Find user\n      const user = await login({ username, password })\n\n      // Check user\n      if (!user) {\n        return badRequest({\n          fields,\n          fieldErrors: { username: 'Invalid credentials' },\n        })\n      }\n\n      // Create Session\n      return createUserSession(user.id, '/posts')\n    }\n    case 'register': {\n      // Check if user exists\n      const userExists = await db.user.findFirst({\n        where: {\n          username,\n        },\n      })\n      if (userExists) {\n        return badRequest({\n          fields,\n          fieldErrors: { username: `User ${username} already exists` },\n        })\n      }\n\n      // Create user\n      const user = await register({ username, password })\n      if (!user) {\n        return badRequest({\n          fields,\n          formError: 'Something went wrong',\n        })\n      }\n\n      // Create session\n      return createUserSession(user.id, '/posts')\n    }\n    default: {\n      return badRequest({\n        fields,\n        formError: 'Login type is invalid',\n      })\n    }\n  }\n\n  return redirect('/posts')\n}\n\nfunction Login() {\n  const actionData = useActionData()\n\n  return (\n    <div className='auth-container'>\n      <div className='page-header'>\n        <h1>Login</h1>\n      </div>\n\n      <div className='page-content'>\n        <form method='POST'>\n          <fieldset>\n            <legend>Login or Register</legend>\n            <label>\n              <input\n                type='radio'\n                name='loginType'\n                value='login'\n                defaultChecked={\n                  !actionData?.fields?.loginType ||\n                  actionData?.fields?.loginType === 'login'\n                }\n              />{' '}\n              Login\n            </label>\n\n            <label>\n              <input\n                type='radio'\n                name='loginType'\n                value='register'\n                defaultChecked={actionData?.fields?.loginType === 'register'}\n              />{' '}\n              Register\n            </label>\n          </fieldset>\n          <div className='form-control'>\n            <label htmlFor='username'>Username</label>\n            <input\n              type='text'\n              name='username'\n              id='username'\n              defaultValue={actionData?.fields?.username}\n            />\n            <div className='error'>\n              {actionData?.fieldErrors?.username ? (\n                <p\n                  className='form-validation-error'\n                  role='alert'\n                  id='username-error'\n                >\n                  {actionData.fieldErrors.username}\n                </p>\n              ) : null}\n            </div>\n          </div>\n\n          <div className='form-control'>\n            <label htmlFor='password'>Password</label>\n            <input\n              type='password'\n              name='password'\n              id='password'\n              defaultValue={actionData?.fields?.password}\n            />\n            <div className='error'>\n              {actionData?.fieldErrors?.password ? (\n                <p\n                  className='form-validation-error'\n                  role='alert'\n                  id='password-error'\n                >\n                  {actionData.fieldErrors.password}\n                </p>\n              ) : null}\n            </div>\n          </div>\n\n          <button className='btn btn-block' type='submit'>\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AACA,gBAAmB;AACnB,qBAAmD;AAwFnD,iBAAiB;AACf,QAAM,aAAa;AAEnB,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD,MAAI,WAGN,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,QAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,YAAD,MACE,oCAAC,UAAD,MAAQ,sBACR,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBACE,CAAC,YAAY,QAAQ,aACrB,YAAY,QAAQ,cAAc;AAAA,MAEnC,KAAI,UAIT,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBAAgB,YAAY,QAAQ,cAAc;AAAA,MACjD,KAAI,cAIX,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAW,aAC1B,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,IAAG;AAAA,IACH,cAAc,YAAY,QAAQ;AAAA,MAEpC,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACZ,YAAY,aAAa,WACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,WAAW,YAAY,YAExB,QAIR,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAW,aAC1B,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,IAAG;AAAA,IACH,cAAc,YAAY,QAAQ;AAAA,MAEpC,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACZ,YAAY,aAAa,WACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,WAAW,YAAY,YAExB,QAIR,oCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,IAAgB,MAAK;AAAA,KAAS;AAAA;AAS1D,IAAO,gBAAQ;",
  "names": []
}
